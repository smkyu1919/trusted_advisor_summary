#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Trusted Advisor 체크 목록을 엑셀로 추출하면서 'Name'을 한국어로 병기
- 시트: All + Pillar별
- 컬럼: Check ID, Name (KO), Name (EN), Category, Description, Metadata
- 한국어 이름 생성 우선순위:
  1) 체크ID 기반 수동 오버라이드(하드코딩 + 옵션 CSV)
  2) 로컬 용어 사전/규칙 치환
  3) Amazon Translate (옵션: USE_AWS_TRANSLATE=1)
사전 준비:
  pip install boto3 pandas openpyxl
필수:
  - Support API는 us-east-1에서만 호출
  - Business/Enterprise/On-Ramp 지원 플랜
"""

import os
import sys
import csv
from typing import Dict, List
from pathlib import Path
import boto3
import botocore
import pandas as pd

# ===== 설정 =====
OUTPUT_XLSX = "trusted_advisor_checks_ko.xlsx"
LANGUAGE = "en"                 # TA API는 'en' 또는 'ja'만 허용
SUPPORT_REGION = "us-east-1"    # Support/TA API 리전 고정
TRANSLATE_REGION = "ap-northeast-2"  # Translate 리전(옵션)
OVERRIDE_CSV = "ta_name_ko_overrides.csv"  # (선택) check_id,name_ko CSV

# ===== 하드코딩 자격증명 (테스트용; 운영/커밋 금지) =====
AWS_ACCESS_KEY_ID="본인 ACCESS_KEY"
AWS_SECRET_ACCESS_KEY="본인 SECRET ACCESS KEY"
AWS_SESSION_TOKEN = None  # STS 임시자격이면 토큰 문자열 입력, 아니면 None

# ===== 글로벌 세션(여기서 만든 세션만 사용) =====
session = boto3.Session(
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    aws_session_token=AWS_SESSION_TOKEN,
    region_name=SUPPORT_REGION,
)

# ===== Pillar 이름 매핑 =====
def pretty_pillar_name(raw: str) -> str:
    if not raw:
        return "Unknown"
    raw_lc = raw.strip().lower()
    mapping = {
        "cost_optimizing": "Cost Optimization",
        "cost_optimization": "Cost Optimization",
        "performance": "Performance",
        "security": "Security",
        "fault_tolerance": "Fault Tolerance",
        "operational_excellence": "Operational Excellence",
        "service_limits": "Service Limits",
        "service_quotas": "Service Limits",
    }
    return mapping.get(raw_lc, raw_lc.replace("_", " ").title())

# ===== 한글명 오버라이드(체크ID 기준; 콘솔 표기 맞추고 싶은 항목 추가) =====
CHECK_ID_KO_OVERRIDES: Dict[str, str] = {
    # 예) "abcd1234": "S3 미완료 멀티파트 업로드 중단 구성",
}

# ===== 용어 사전(영→한) + 간단 규칙 =====
GLOSSARY = [
    ("Amazon S3", "Amazon S3"),
    ("S3 ", "S3 "),
    ("EC2", "EC2"),
    ("RDS", "RDS"),
    ("EBS", "EBS"),
    ("ELB", "ELB"),
    ("Auto Scaling", "Auto Scaling"),
    ("Trusted Advisor", "Trusted Advisor"),
    ("Cost Optimization", "비용 최적화"),
    ("Performance", "성능"),
    ("Security", "보안"),
    ("Fault Tolerance", "장애 허용"),
    ("Operational Excellence", "운영 우수성"),
    # 일반 용어
    ("Incomplete Multipart Upload", "미완료 멀티파트 업로드"),
    ("Multipart Upload", "멀티파트 업로드"),
    ("Abort Configuration", "중단 구성"),
    ("Abort", "중단"),
    ("Public Access", "퍼블릭 액세스"),
    ("Publicly Accessible", "퍼블릭 액세스 가능"),
    ("Encryption", "암호화"),
    ("Unencrypted", "비암호화"),
    ("Backup", "백업"),
    ("Snapshot", "스냅샷"),
    ("Provisioned", "프로비저닝된"),
    ("Underutilized", "저활용"),
    ("Idle", "유휴"),
    ("Utilization", "활용도"),
    ("Reserved Instances", "예약 인스턴스"),
    ("Savings Plans", "세이빙스 플랜"),
    ("Limits", "제한"),
    ("Quotas", "할당량"),
    ("Region", "리전"),
    ("Availability Zone", "가용 영역"),
    ("Best Practices", "모범 사례"),
    ("Configuration", "구성"),
    ("Security Group", "보안 그룹"),
    ("Open Ports", "열린 포트"),
    ("IAM", "IAM"),
    ("Root Account", "루트 계정"),
    ("MFA", "MFA"),
    ("Logging", "로깅"),
    ("Monitoring", "모니터링"),
]

def apply_glossary(en_name: str) -> str:
    ko = en_name
    for src, dst in GLOSSARY:
        ko = ko.replace(src, dst)
    ko = ko.replace(" - ", " - ").replace("  ", " ").strip()
    return ko

def load_csv_overrides(path: str) -> Dict[str, str]:
    d: Dict[str, str] = {}
    p = Path(path)
    if not p.exists():
        return d
    with p.open("r", encoding="utf-8-sig", newline="") as f:
        reader = csv.DictReader(f)
        # 기대 컬럼: check_id,name_ko
        for row in reader:
            cid = (row.get("check_id") or "").strip()
            name_ko = (row.get("name_ko") or "").strip()
            if cid and name_ko:
                d[cid] = name_ko
    return d

def translate_ko_fallback(sess: boto3.Session, text: str) -> str:
    """USE_AWS_TRANSLATE=1 이면 Amazon Translate로 보정(옵션)."""
    if os.getenv("USE_AWS_TRANSLATE", "0") != "1":
        return text
    try:
        tr = sess.client("translate", region_name=TRANSLATE_REGION)
        res = tr.translate_text(Text=text, SourceLanguageCode="en", TargetLanguageCode="ko")
        return res.get("TranslatedText") or text
    except Exception:
        return text

def get_ko_name(sess: boto3.Session, check_id: str, name_en: str,
                csv_override: Dict[str, str]) -> str:
    # 1) CSV/하드코딩 오버라이드(체크ID 기준)
    if check_id in csv_override:
        return csv_override[check_id]
    if check_id in CHECK_ID_KO_OVERRIDES:
        return CHECK_ID_KO_OVERRIDES[check_id]
    # 2) 용어 사전 치환
    ko_rule = apply_glossary(name_en)
    # 3) 여전히 어색하면 Translate로 보정(옵션)
    if ko_rule == name_en or any(w in ko_rule for w in ["Upload", "Configuration", "Unencrypted", "Limits"]):
        return translate_ko_fallback(sess, ko_rule)
    return ko_rule

def main():
    # === STS로 자격증명 즉시 검증 ===
    try:
        sts = session.client("sts", region_name=SUPPORT_REGION)
        ident = sts.get_caller_identity()
        print(f"[INFO] Caller: {ident.get('Arn')}")
    except botocore.exceptions.NoCredentialsError:
        sys.stderr.write("[에러] AWS 자격 증명을 찾을 수 없습니다. (키/토큰 확인)\n")
        sys.exit(1)
    except botocore.exceptions.ClientError as e:
        sys.stderr.write(f"[에러] STS 호출 실패: {e}\n")
        sys.exit(1)

    support = session.client("support", region_name=SUPPORT_REGION)

    # === TA 체크 목록 조회 ===
    try:
        resp = support.describe_trusted_advisor_checks(language=LANGUAGE)
    except botocore.exceptions.ClientError as e:
        code = e.response.get("Error", {}).get("Code", "")
        if code in {"SubscriptionRequiredException", "AccessDeniedException"}:
            sys.stderr.write(
                "[에러] Trusted Advisor API 권한/지원 플랜 필요 "
                "(Business/Enterprise/On-Ramp).\n"
            )
        elif code == "UnhandledValidationException":
            sys.stderr.write("[에러] language는 'en' 또는 'ja'만 허용됩니다.\n")
        else:
            sys.stderr.write(f"[에러] Support API 호출 실패: {code}: {e}\n")
        sys.exit(1)

    checks: List[dict] = resp.get("checks", [])
    if not checks:
        print("가져올 Trusted Advisor 체크가 없습니다.")
        Path(OUTPUT_XLSX).unlink(missing_ok=True)
        return

    # === 한국어 이름 적용 ===
    csv_override = load_csv_overrides(OVERRIDE_CSV)
    rows = []
    for c in checks:
        cid = c.get("id")
        name_en = c.get("name") or ""
        name_ko = get_ko_name(session, cid, name_en, csv_override)
        rows.append({
            "Check ID": cid,
            "Name (KO)": name_ko,
            "Name (EN)": name_en,
            "Category": pretty_pillar_name(c.get("category")),
            "Description": c.get("description"),
            "Metadata": ", ".join(c.get("metadata") or []),
        })

    df_all = pd.DataFrame(rows).sort_values(["Category", "Name (KO)"], ignore_index=True)

    # === 엑셀 저장 ===
    with pd.ExcelWriter(OUTPUT_XLSX, engine="openpyxl") as xw:
        df_all.to_excel(xw, index=False, sheet_name="All")
        for category in df_all["Category"].dropna().unique():
            sheet_name = category[:31]
            df_all[df_all["Category"] == category].reset_index(drop=True)\
                .to_excel(xw, index=False, sheet_name=sheet_name)

    print(f"완료: {OUTPUT_XLSX} 생성 (All + Pillar별 시트, 한국어 이름 포함)")
    print("오버라이드: ta_name_ko_overrides.csv (check_id,name_ko)로 추가 가능")
    if os.getenv("USE_AWS_TRANSLATE", "0") == "1":
        print("참고: Amazon Translate 사용함 (USE_AWS_TRANSLATE=1).")

if __name__ == "__main__":
    main()
