#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#Github v1.4 (final)

"""
Trusted Advisor 체크 결과를 단일 시트(All)로 출력
- Category 순 정렬
- 각 체크 행에 '리소스 값' 컬럼 추가:
    '정상 : r1, r2\\n주의 : r3\\n경고 : r4, r5' 형식
- 제외(isSuppressed=True)는 카운트만 '제외'에 반영하고 '리소스 값'에는 포함하지 않음
"""

import sys
import time
from typing import Dict, List, Tuple, DefaultDict
from collections import defaultdict
from pathlib import Path

import boto3
import botocore
import pandas as pd
from openpyxl.styles import Alignment
from openpyxl.utils import get_column_letter

OUTPUT_XLSX = "trusted_advisor_checks.xlsx"

# ✔ 언어: en 또는 ja 만 허용
LANGUAGE = "en"

# ✔ TA/SUPPORT API는 us-east-1 고정
SUPPORT_REGION = "us-east-1"

# ✔ (예시) 명시적 자격 (하드코딩 권장X: 환경변수/프로파일 사용 권장)
#    실제 운영에서는 환경변수/프로파일/SSO/AssumeRole 권장
session = boto3.Session(
    aws_access_key_id="계정 Access Key",
    aws_secret_access_key="계정 Secret Key",
    region_name=SUPPORT_REGION,  # 세션의 기본 리전도 맞춰둠
)

# 콘솔 Pillar명 보기 좋게 매핑
PRETTY_PILLAR: Dict[str, str] = {
    "cost_optimizing": "Cost Optimization",
    "cost_optimization": "Cost Optimization",
    "performance": "Performance",
    "security": "Security",
    "fault_tolerance": "Fault Tolerance",
    "operational_excellence": "Operational Excellence",
    "service_limits": "Service Limits",
    "service_quotas": "Service Limits",
}

# TA status → 한글 표기(요청 치환)
STATUS_MAP = {
    "error": "나쁨",    # (= 조치 권고)
    "warning": "보통",  # (= 조사 권고)
    "ok": "좋음",       # (= 발견된 문제 없음)
}

def pretty_pillar_name(raw: str) -> str:
    if not raw:
        return "Unknown"
    raw_lc = raw.strip().lower()
    return PRETTY_PILLAR.get(raw_lc, raw_lc.replace("_", " ").title())

def backoff_sleep(i: int):
    """간단한 지수 백오프 (최대 10초)"""
    time.sleep(min(2 ** i, 10))

def fetch_check_result_summary_and_ids(
    support, check_id: str
) -> Tuple[int, int, int, int, str, Dict[str, List[str]]]:
    """
    각 체크에 대해:
      - 경고(error), 주의(warning), 정상(ok), 제외(isSuppressed=True) 카운트 집계
      - 체크 전체 상태(요약) → 한글 매핑(경고/주의/정상/미확인)
      - 상태별 리소스ID 목록(정상/주의/경고) 반환 (제외는 목록에 포함하지 않음)

    Returns:
        (error_cnt, warn_cnt, ok_cnt, excluded_cnt, overall_ko, status_to_ids)
    """
    warn_count = 0
    error_count = 0
    ok_count = 0
    excluded_count = 0

    next_token = None
    result_status_raw = None
    status_to_ids: DefaultDict[str, List[str]] = defaultdict(list)

    while True:
        # 페이지네이션 + 스로틀링 대비
        for attempt in range(6):
            try:
                kwargs = {"checkId": check_id, "language": LANGUAGE}
                if next_token:
                    kwargs["nextToken"] = next_token
                resp = support.describe_trusted_advisor_check_result(**kwargs)
                break
            except botocore.exceptions.ClientError as e:
                code = e.response.get("Error", {}).get("Code", "")
                if code in {"ThrottlingException", "TooManyRequestsException"}:
                    backoff_sleep(attempt)
                    continue
                raise

        result = resp.get("result", {}) or {}

        # 전체 체크 상태(요약) 원본
        if result_status_raw is None:
            result_status_raw = (result.get("status") or "").lower().strip() or "not_available"

        # 리소스 상세
        flagged = result.get("flaggedResources") or []
        for r in flagged:
            st_raw = (r.get("status") or "").lower().strip()
            rid = (r.get("resourceId") or "").strip()
            is_suppressed = bool(r.get("isSuppressed"))

            # 제외 카운트
            if is_suppressed:
                excluded_count += 1

            # 집계
            if st_raw == "error":
                error_count += 1
            elif st_raw == "warning":
                warn_count += 1
            elif st_raw == "ok":
                ok_count += 1

            # 리소스ID 목록: 제외는 목록에 포함하지 않음, 빈 ID는 스킵
            if (not is_suppressed) and rid:
                if st_raw in ("ok", "warning", "error"):
                    status_to_ids[st_raw].append(rid)

        next_token = resp.get("nextToken")
        if not next_token:
            break

    # 최종 상태(요약) 한글 매핑
    overall = STATUS_MAP.get(result_status_raw, "미확인")

    return error_count, warn_count, ok_count, excluded_count, overall, status_to_ids

def build_resource_value_cell(status_to_ids: Dict[str, List[str]]) -> str:
    """
    '리소스 값' 셀 문자열 구성:
      정상 : id1, id2
      주의 : id3
      경고 : id4, id5
    순서는 정상 → 주의 → 경고
    해당 상태에 리소스가 없으면 줄 자체를 생략
    """
    lines: List[str] = []
    order = [("ok", "좋음"), ("warning", "보통"), ("error", "나쁨")]
    for key, label in order:
        ids = status_to_ids.get(key, [])
        if not ids:
            continue
        # 중복 제거(안정적 표시를 위해 순서 유지)
        seen = set()
        uniq = [x for x in ids if not (x in seen or seen.add(x))]
        lines.append(f"{label} : {', '.join(uniq)}")
    return "\n".join(lines)

def main():
    support = session.client("support", region_name=SUPPORT_REGION)

    # 체크 메타데이터 조회
    try:
        resp = support.describe_trusted_advisor_checks(language=LANGUAGE)
    except botocore.exceptions.ClientError as e:
        code = e.response.get("Error", {}).get("Code", "")
        if code in {"SubscriptionRequiredException", "AccessDeniedException"}:
            sys.stderr.write(
                "[에러] Trusted Advisor API 사용 권한/지원 플랜 부족.\n"
                " - Business/Enterprise/On-Ramp 지원 플랜 필요\n"
                " - 또는 aws-support 관련 권한 필요\n"
            )
        elif code == "UnhandledValidationException":
            sys.stderr.write("[에러] language 값은 'en' 또는 'ja'만 허용됩니다.\n")
        else:
            sys.stderr.write(f"[에러] API 호출 실패: {code}: {e}\n")
        sys.exit(1)
    except botocore.exceptions.NoCredentialsError:
        sys.stderr.write("[에러] 자격 증명을 찾을 수 없습니다.\n")
        sys.exit(1)

    checks: List[dict] = resp.get("checks", []) or []
    if not checks:
        print("가져올 Trusted Advisor 체크가 없습니다.")
        Path(OUTPUT_XLSX).unlink(missing_ok=True)
        return

    rows = []
    for c in checks:
        check_id = c.get("id")
        name = c.get("name") or ""
        category = pretty_pillar_name(c.get("category"))
        description = (c.get("description") or "").strip()

        # 체크 결과(집계 + 상태별 리소스ID)
        try:
            error_cnt, warn_cnt, ok_cnt, excl_cnt, overall, status_to_ids = (
                fetch_check_result_summary_and_ids(support, check_id)
            )
        except botocore.exceptions.ClientError as e:
            sys.stderr.write(f"[경고] 체크 결과 조회 실패 ({check_id}, {name}): {e}\n")
            error_cnt = warn_cnt = ok_cnt = excl_cnt = 0
            overall = "미확인"
            status_to_ids = {}

        resource_value = build_resource_value_cell(status_to_ids)

        rows.append(
            {
                "Check ID": check_id,
                "Name": name,
                "Category": category,
                "Description": description,
                "경고(조치 권고)": error_cnt,
                "주의(조사 권고)": warn_cnt,
                "정상(발견된 문제 없음)": ok_cnt,
                "제외": excl_cnt,
                "최종 상태": overall,
                "리소스 값": resource_value,  # ← 요구사항 반영
            }
        )

    # 단일 시트(All) + Category/Name 정렬
    df_all = pd.DataFrame(rows).sort_values(["Category", "Name"], ignore_index=True)

    # 엑셀 저장 (시트 1개: All) + '리소스 값' 줄바꿈 표시
    with pd.ExcelWriter(OUTPUT_XLSX, engine="openpyxl") as xw:
        df_all.to_excel(xw, index=False, sheet_name="All")

        ws = xw.sheets["All"]
        # '리소스 값' 열 wrap-text 적용 및 약간의 열 너비 조정
        if "리소스 값" in df_all.columns:
            col_idx = df_all.columns.get_loc("리소스 값") + 1  # 1-based
            col_letter = get_column_letter(col_idx)
            ws.column_dimensions[col_letter].width = 60  # 가독성 위해 넓게
            for row in range(2, ws.max_row + 1):  # 헤더 제외
                cell = ws.cell(row=row, column=col_idx)
                cell.alignment = Alignment(wrap_text=True, vertical="top")

    print(f"완료: {OUTPUT_XLSX} 생성 (All 시트)")
    print(" - Category 순 정렬, '리소스 값' 컬럼 포함")
    print(" - '리소스 값'에는 제외 리소스는 포함되지 않습니다.")

if __name__ == "__main__":
    main()
